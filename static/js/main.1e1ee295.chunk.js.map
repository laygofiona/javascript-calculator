{"version":3,"sources":["App.js","index.js"],"names":["Display","props","React","createElement","id","className","inputDisplay","Operators","changeInput","char","operators","isInitializedVar","initialInputVar","length","some","operator","setInitialInputFunc","setisInitializedFunc","concat","input","onClick","setDisplayFunc","exp","math","displayVar","evaluate","toString","App","_useState","useState","_useState2","_slicedToArray","initialInput","setInitialInput","_useState3","_useState4","display","setDisplay","_useState5","_useState6","isInitialized","setisInitialized","findLastOperatorIndex","arr","allOperators","lastIndex","_loop","i","v","_ret","useEffect","initialInputArr","split","inputArr","lastOperatorIndex","newInputFromOperator","slice","checkMultipleZeroes","checkLastTwoCharsOperators","checkLastTwoCharsMinus","splice","checkLastThreeOperators","newInputArr","searchValue","filter","value","getOccurence","number","decimalsBetweenOperatorAndLast","decimalIndex","findLastIndex","join","style","height","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1e1ee295.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport * as math from 'mathjs';\n\n\nconst Display = (props) => {\n  return (\n    <div id=\"display\" className='position-relative'>\n        <h4  className='position-absolute bottom-0 end-0'>{props.inputDisplay}</h4>\n    </div>\n  )\n}\n\nconst Operators = (props) => {\n   \n  const changeInput = (char) => {\n    let operators = ['/', '*', '+'];\n    return () => {\n      if((props.isInitializedVar == true)){\n        if(props.initialInputVar.length === 0){\n          if(operators.some((operator) => operator === char) === false){\n            if(char !== '-' && char !== '.'){\n              props.setInitialInputFunc(char);\n              props.setisInitializedFunc(false);\n            } else {\n              props.setInitialInputFunc(`0${char}`);   \n              props.setisInitializedFunc(false); \n            }\n          }\n        } else {\n          props.setInitialInputFunc(input => input + char);\n          props.setisInitializedFunc(false);\n        }\n      } else {\n        props.setInitialInputFunc(input => input + char);\n      }\n    }\n  }\n\n  const intialize = () => {\n    return () => {\n      props.setDisplayFunc(\"0\");\n      props.setInitialInputFunc(\"\");\n      props.setisInitializedFunc(true);\n    }\n  }\n\n  const calculate = () => {\n    return () => {\n      let exp = math.compile(props.displayVar);\n      props.setInitialInputFunc(math.round(exp.evaluate(), 4).toString());\n      props.setisInitializedFunc(true);\n    }\n  }\n  \n  \n  return  (\n    <div id=\"operators\" className='operators-struct'>\n        <button onClick={intialize()} id=\"clear\" className='horizontal-growth AC'><span>AC</span></button>\n        <button onClick={changeInput('/')} id=\"divide\" className='item operator'><span>/</span></button>\n        <button onClick={changeInput('*')} id=\"multiply\" className='item operator'><span>x</span></button>\n        <button onClick={changeInput('7')} id=\"seven\" className='item num'><span>7</span></button>\n        <button onClick={changeInput('8')} id=\"eight\" className='item num'><span>8</span></button>\n        <button onClick={changeInput('9')} id=\"nine\" className='item num'><span>9</span></button>\n        <button onClick={changeInput('-')} id=\"subtract\" className='item operator'><span>-</span></button>\n        <button onClick={changeInput('4')} id=\"four\" className='item num'><span>4</span></button>\n        <button onClick={changeInput('5')} id=\"five\" className='item num'><span>5</span></button>\n        <button onClick={changeInput('6')} id=\"six\" className='item num'><span>6</span></button>\n        <button onClick={changeInput('+')} id=\"add\" className='item operator'><span>+</span></button>\n        <button onClick={changeInput('1')} id=\"one\" className='item num'><span>1</span></button>\n        <button onClick={changeInput('2')} id=\"two\" className='item num'><span>2</span></button>\n        <button onClick={changeInput('3')} id=\"three\" className='item num'><span>3</span></button>\n        <button onClick={calculate()} id=\"equals\" className=\"vertical-growth equals-sign\"><span>=</span></button>\n        <button onClick={changeInput('0')} id=\"zero\" className='horizontal-growth num'><span>0</span></button>\n        <button onClick={changeInput('.')} id=\"decimal\" className='horizontal-growth num'><span>.</span></button>\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [initialInput, setInitialInput] = useState(\"\");\n  const [display, setDisplay] = useState(\"0\");\n  const [isInitialized, setisInitialized] = useState(true);\n\n  const checkMultipleZeroes = (input) => {\n    let inputArr = input.split(\"\");\n    let lastOperatorIndex = findLastOperatorIndex(inputArr);\n    let newInputFromOperator = inputArr.slice(lastOperatorIndex, inputArr.length);\n\n    if(lastOperatorIndex <= 0) {\n      if (inputArr[0] == '0' && inputArr[1] == '0') {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if(newInputFromOperator[1] == '0' && newInputFromOperator[2] == '0') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  const checkLastTwoCharsSame = (input) => {\n    if((input[input.length - 1] === '.') && (input[input.length - 2] === '.')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const checkLastTwoCharsOperators = (input) => {\n    let operators = ['*', '/', '+'];\n    if((operators.some((operator) => input[input.length - 1] === operator)) && (operators.some((operator) => input[input.length - 2] === operator))) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  //check if last three characters in initialInput are operands, if they are then return true \n  const checkLastTwoCharsMinus = (input) => {\n    if((input[input.length - 1] === '-') && (input[input.length - 2] === '-') && (input[input.length - 3] === '-')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const checkLastThreeOperators = (input) => {\n    let operators = ['*', '/', '+', '-'];\n    if((operators.some((operator) => input[input.length - 1] === operator)) && (operators.some((operator) => input[input.length - 2] === operator)) && (operators.some((operator) => input[input.length - 3] === operator))) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const getOccurence = (input, searchValue) => {\n    return input.filter((value) => (value === searchValue)).length;\n  }\n\n  const findLastOperatorIndex = (arr) => {\n    let allOperators = ['-', '+', '*', '/'];\n    let lastIndex = 0;\n    for(let i = arr.length - 1; i >= 0; i--) {\n      if(allOperators.some((operator) => operator === arr[i])){\n        lastIndex += i;\n        return lastIndex;\n      }\n    }\n    if(lastIndex === 0) {\n      return 0;\n    }\n  }\n\n  const decimalsBetweenOperatorAndLast = (input) => {\n    let inputArr = input.split(\"\");\n    let lastOperatorIndex = findLastOperatorIndex(inputArr);\n    let newInputArr = inputArr.slice(lastOperatorIndex, inputArr.length);\n    let numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n    if(getOccurence(newInputArr, '.') === 2 && numbers.some((number) => number === newInputArr[newInputArr.length - 1])){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n  //if last decimal point and first decimal point have an operator in between\n  useEffect(() => {\n    if(initialInput !== \"\" ) {\n      //if the last two characters in initialINput string are decimals or are operators then --> set display to intialInput but you remove the 2nd last character in InitialINput \n      let initialInputArr = initialInput.split(\"\"); \n      if(checkLastTwoCharsSame(initialInput) == true || checkMultipleZeroes(initialInput) == true || checkLastTwoCharsOperators(initialInput) == true || checkLastTwoCharsMinus(initialInput)) {\n        initialInputArr.splice(initialInputArr.length - 2, 1);\n      } else if (checkLastThreeOperators(initialInput) == true) {\n        initialInputArr.splice(initialInputArr.length - 3, 2);\n      }// else if you find 2 decimal points in initialInput and there is no operator between last and first decimal point, then remove the decimal point at the last index\n      else if(decimalsBetweenOperatorAndLast(initialInput) === true) {\n        let decimalIndex = initialInputArr.findLastIndex((char) => (char === '.'));\n        initialInputArr.splice(decimalIndex, 1);\n      }\n      setInitialInput(initialInputArr.join(\"\"));\n      setDisplay(initialInput);\n    }\n  }, [initialInput])\n  \n  return (\n    <div className='d-flex justify-content-center align-items-center' style={{height: '100vh'}}>\n      <div id=\"myCalculator\" className=\"myCalc\">\n        <Display inputDisplay={display}/>\n        <Operators setInitialInputFunc={setInitialInput} setDisplayFunc={setDisplay} initialInputVar={initialInput} isInitializedVar={isInitialized} setisInitializedFunc={setisInitialized} displayVar={display}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}